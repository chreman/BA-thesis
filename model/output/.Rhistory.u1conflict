summary(housing$BDS)
head(housing$BDS)
housing$BDS
sum(housing$BDS==2 && housing$RMS==5,na.rm=T)
sum(housing$BDS==3,na.rm=T)
sum(housing$RMS==5,na.rm=T)
subset(housing,subset="housing$BDS==2")
subset(housing,subset=housing$BDS==2)
housingsub<-subset(housing,subset=housing$BDS==2)
head(housingsub)
summary(housingsub)
sum(housingsub$RMS==5,na.rm=T)
sum(housing$RMS==7,na.rm=T)
sum(housingsub$RMS==7,na.rm=T)
housingsub<-subset(housing,subset=housing$ACR==3)
hist(housing$VAL)
hist(housing)
hist(housing$RMS)
hist(housing$BDS)
table(housing$ACR,housing$AGS)
agriLog<-(housing$ACR==3,housing$AGS==6)
agriLog<-(housing$ACR==3 AND housing$AGS==6)
agriLog<-(housing$ACR==3 & housing$AGS==6)
agriLog
which(agriLog)
indexes=which(agriLog)
housingsub=housing(indexes)
housingsub=housing[indexes,]
summary(housingsub)
summary(housingsub$MRGX)
strsplit(housing$wgtp)
strsplit(housing$wgtp,split=0)
strsplit(housing$wgtp,fixed=T)
strsplit(housing$wgtp,split=wgtp,fixed=T)
strsplit(housing$wgtp,split="wgtp",fixed=T)
strsplit(housing$wgtp,split="wgtp")
strsplit(housing$wgtp,split=wgtp)
strsplit(housing$wgtp)
strsplit(housing$wgtp,split=0)
strsplit(housing$wgtp,split=1)
strsplit(housing,split=wgtp)
strsplit(housing,split="wgtp"")
strsplit(housing,split="wgtp")
strsplit(housing,split=0)
strsplit(housing$name,split=0)
strsplit(housing$names,split=0)
quantile(housing$YBL)
quantile(housing$YBL,na.rm=T)
?heatmap
heatmap([housing$ACR,housing$AGS])
heatmap(table(housing$ACR,housing$AGS))
heatmap(table(housing$ACR,housing$VAL))
heatmap(table(housing$RMS,housing$VAL))
splitNames<-strsplit(names(housing),"wgtp")
splitNames
splitNames[123]
population<-read.csv(file="ss06pid.csv",header=T,sep=",")
summary(pop)
summary(population)
names(housing)
names(population)
mergedData<-merge(housing,population,by.x="SERIALNO",by.y="SERIALNO",all=T)
dim(mergedData)
library(datasets)
iris
data(iris)
?dendrogram
plot(data(iris))
??dendrogram
dendPlot(data(iris))
library(dendPlot)
?igraph
library(maps)
maps
?maps
??maps
library(datasets)
data(iris)
library(datasets)
data(iris)
set.seed(1234)
par(mar=c(0,0,0,0))
x<-rnorm(12,mean=(1:3,each=4),sd=0.2)
set.seed(1234)
par(mar=c(0,0,0,0))
x<-rnorm(12,mean=rep(1:3,each=4),sd=0.2)
y<-rnorm(12,mean=rep(c(1,2,1),each=4),sd=0.2)
plot(x,y,col="blue",pch=19,cex=2)
text(x+0.05,y+0.05,labels=as.character(1:12))
dataFrame=data.frame(x=x,y=y)
dataFrame
table(dataFrame)
dist(dataFrame)
?clustering
??clustering
distxy<-dist(dataFrame)
hClustering<-hclust(distxy)
hClustering
plot(hClustering)
head(iris)
irisSubset<-iris[-5]
head(irisSubset)
distIris<-dist(irisSubset)
IrisClustering<-hclust(distIris)
plot(IrisClustering)
plot(IrisClustering,complete)
plot(IrisClustering,ylab="Height")
IrisClustering
summary(IrisClustering)
IrisClustering$height
plot(IrisClustering,labels=T)
plot(IrisClustering,ylab=IrisClustering$height)
plot(IrisClustering)
plot(IrisClustering,ylab=1:3)
plot(IrisClustering,ylab=c(1,2,3)
plot(IrisClustering,ylab=height
plot(IrisClustering,ylab=height)
plot(IrisClustering,ylab=IrisClustering$order)
plot(IrisClustering,ylab=IrisClustering$labels)
plot(IrisClustering,ylab=IrisClustering$height)
plot(IrisClustering,xlab=IrisClustering$height)
plot(IrisClustering,xlab=IrisClustering$labels)
plot(IrisClustering,xlab=IrisClustering$order)
myplclust <- function( hclust, lab=hclust$labels, lab.col=rep(1,length(hclust$labels)), hang=0.1,...
## modifiction of plclust for plotting hclust objects *in colour*!
## Copyright Eva KF Chan 2009
## Arguments:
##
hclust:
hclust object
##
lab:
a character vector of labels of the leaves of the tree
##
lab.col:
colour for the labels; NA=default device foreground colour
##
hang:
as in hclust & plclust
## Side effect:
##
A display of hierarchical cluster with coloured leaf labels.
y <- rep(hclust$height,2); x <- as.numeric(hclust$merge)
y <- y[which(x<0)]; x <- x[which(x<0)]; x <- abs(x)
y <- y[order(x)]; x <- x[order(x)]
plot( hclust, labels=FALSE, hang=hang, ... )
text( x=x, y=y[hclust$order]-(max(hclust$height)*hang),
labels=lab[hclust$order], col=lab.col[hclust$order],
srt=90, adj=c(1,0.5), xpd=NA, ... )
}
myplclust <- function( hclust, lab=hclust$labels, lab.col=rep(1,length(hclust$labels)), hang=0.1,...
## modifiction of plclust for plotting hclust objects*in colour*!
## Copyright Eva KF Chan 2009
## Arguments:
## hclust: hclust object
## lab: a character vector of labels of the leaves of the tree
## lab.col: colour for the labels; NA=default device foreground colour
## hang: as in hclust & plclust
## Side effect:
## A display of hierarchical cluster with coloured leaf labels.
y <- rep(hclust$height,2); x <- as.numeric(hclust$merge)
y <- y[which(x<0)]; x <- x[which(x<0)]; x <- abs(x)
y <- y[order(x)]; x <- x[order(x)]
plot( hclust, labels=FALSE, hang=hang, ... )
text( x=x, y=y[hclust$order]-(max(hclust$height)*hang),
labels=lab[hclust$order], col=lab.col[hclust$order],
srt=90, adj=c(1,0.5), xpd=NA, ... )
}
myplclust <- function( hclust, lab=hclust$labels, lab.col=rep(1,length(hclust$labels)), hang=0.1,{
## modifiction of plclust for plotting hclust objects*in colour*!
## Copyright Eva KF Chan 2009
## Arguments:
## hclust: hclust object
## lab: a character vector of labels of the leaves of the tree
## lab.col: colour for the labels; NA=default device foreground colour
## hang: as in hclust & plclust
## Side effect:
## A display of hierarchical cluster with coloured leaf labels.
y <- rep(hclust$height,2); x <- as.numeric(hclust$merge)
y <- y[which(x<0)]; x <- x[which(x<0)]; x <- abs(x)
y <- y[order(x)]; x <- x[order(x)]
plot( hclust, labels=FALSE, hang=hang, ... )
text( x=x, y=y[hclust$order]-(max(hclust$height)*hang),
labels=lab[hclust$order], col=lab.col[hclust$order],
srt=90, adj=c(1,0.5), xpd=NA, ... )
}
myplclust<-function(hclust,lab=hclust$labels,lab.col=rep(1,length(hclust$labels)),hang=0.1,...){}
myplclust<-function(hclust,lab=hclust$labels,lab.col=rep(1,length(hclust$labels)),hang=0.1,...){
y <- rep(hclust$height,2);x <- as.numeric(hclust$merge)
y <- y[which(x<0)]; x <-[which(x<0)]; x<- abs(x)
myplclust<-function(hclust,lab=hclust$labels,lab.col=rep(1,length(hclust$labels)),hang=0.1,...){
y <- rep(hclust$height,2);x <- as.numeric(hclust$merge)
y <- y[which(x<0)]; x <-x[which(x<0)]; x<- abs(x)
y <- y[order(x)]; x <- x[order(x)]
plot(hclust, labels=FALSE, hang=hang,...)
text(x=x,y=y[hclust$order]-(max(hclust$height)*hang),labels=lab[hclust$order],col=lab.col[hclust$order],srt=90, adj=c(1,0.5),xpd=NA,...)
}
myplclust(IrisClustering)
download.file(https://spark-public.s3.amazonaws.com/dataanalysis/quiz3question4.rda ,method=curl)
download.file("https://spark-public.s3.amazonaws.com/dataanalysis/quiz3question4.rda", method=curl)
download.file("https://spark-public.s3.amazonaws.com/dataanalysis/quiz3question4.rda", destfile="q3q4.rda",method=curl)
download.file("https://spark-public.s3.amazonaws.com/dataanalysis/quiz3question4.rda", destfile="q3q4.rda",method="curl")
download.file("https://spark-public.s3.amazonaws.com/dataanalysis/quiz3question4.rda", destfile="q3q4.rda",method=curl)
download.file("https://spark-public.s3.amazonaws.com/dataanalysis/quiz3question4.rda", destfile="q3q4.rda",method="curl")
library(RCurl)
download.file("https://spark-public.s3.amazonaws.com/dataanalysis/quiz3question4.rda", destfile="q3q4.rda",method="curl")
?curl
??curl
download.file(url="https://spark-public.s3.amazonaws.com/dataanalysis/quiz3question4.rda",destfile="quiz3q4.rda",method="curl")
download.file(url="https://spark-public.s3.amazonaws.com/dataanalysis/quiz3question4.rda",destfile="quiz3q4.rda",method="wget")
q4data<-read.csv(quiz3q4.rda)
download.file("https://spark-public.s3.amazonaws.com/dataanalysis/quiz3question4.csv ",destfile="quiz3q4.csv",method=wget)
download.file("https://spark-public.s3.amazonaws.com/dataanalysis/quiz3question4.csv ",destfile="quiz3q4.csv",method="wget")
download.file("https://spark-public.s3.amazonaws.com/dataanalysis/quiz3question4.csv ",destfile="quiz3q4.csv",method="curl")
download.file("https://spark-public.s3.amazonaws.com/dataanalysis/quiz3question4.csv",destfile="quiz3q4.csv",method="wget")
q4data<-read.csv("quiz3q4.rda")
q4data<-read.csv("quiz3q4.csv")
head(q4data)
summary(q4data)
plot(q4data)
kmeans(q4data,centers=2,iter.max=100)
q4kmeans<-kmeans(q4data,centers=2,iter.max=100)
plot(q4kmeans)
plot(q4data$x,q4data$y,col=q4kmeans$cluster)
q4kmeans<-kmeans(q4data,centers=2,iter.max=100,nstart=1)
plot(q4data$x,q4data$y,col=q4kmeans$cluster)
library(ElemStatLearn)
data(zip.train)
library(ElemStatLearn)
data(zip.train)
im = zip2image(zip.train,8)
image(im)
im2 = zip2image(zip.train,18)
image(im2)
?svd
svd(im)
plot(svd(im))
svd1<-svd(im)
svd2<-svd(im2)
svd1
head(svd1)
par<-mfrow(c(1,2))
par(mfrow(c(1,2)))
par(mfrow=c(1,2))
plot(svd1$d,xlab="Column", ylab="Singular Value",pch=19)
plot(svd1$d^2/sum(svd$1)^2,xlab="Column",ylab="% Variance explained",pch=19)
plot(svd1$d^2/sum(svd$1^2),xlab="Column",ylab="% Variance explained",pch=19)
plot(svd1$d^2/sum(svd1$^2),xlab="Column",ylab="% Variance explained",pch=19)
plot(svd1$d^2/sum(svd1$d^2),xlab="Column",ylab="% Variance explained",pch=19)
svd1$d^2 / sum(svd1$d^2)
svd2$d^2 / sum(svd2$d^2)
par(mfrow=c(1,2))
image(im)
image(im2)
?packages
??packages
download.file(url="https://spark-public.s3.amazonaws.com/dataanalysis/movies.txt", destfile="movies.txt",method=wget)
download.file(url="https://spark-public.s3.amazonaws.com/dataanalysis/movies.txt", destfile="movies.txt",method=curl)
download.file(url="https://spark-public.s3.amazonaws.com/dataanalysis/movies.txt", destfile="movies.txt",method="wget")
load(movies.txt)
read.csv(file=movies.txt)
load(file="movies.txt")
read.csv(file="movies.txt")
movies<-read.csv(file="movies.txt")
read.csv2(file="/home/chris/projects/development/worldbankprojects.csv",header="TRUE",sep=",")
??xml
library(xml)
library(XML)
xmlParse(file="/home/chris/projects/development/worldbankprojects.xml")
wbdata<-xmlParse(file="/home/chris/projects/development/worldbankprojects.xml")
wbdata<-as.data.frame(wbdata)
wbdata<-xmlParse(file="/home/chris/projects/development/worldbankprojects.xml",asTree=T)
raw<-read.csv2(file="/home/chris/projects/development/worldbankprojects.csv",header=T,sep=",")
head(raw)
names(raw)
summary(raw)
raw<-read.csv2(file="/home/chris/projects/development/worldbankprojects.csv",header=T,sep=",",quote=""""")
raw<-read.csv2(file="/home/chris/projects/development/worldbankprojects.csv",header=T,sep=",",quote="''")
head(raw)
summary(raw)
unique(raw)
raw<-(file="/home/chris/projects/openspending/Rechnungsabschluss2009.csv",sep=";",header=T)
raw<-(file="/home/chris/projects/openspending/Rechnungsabschluss2009.csv",sep=";",header=T,quote="'")
raw<-(file="/home/chris/projects/openspending/Rechnungsabschluss2009.csv",sep=";",header=T,quote="''")
raw<-(file="/home/chris/projects/openspending/Rechnungsabschluss2009.csv",header=T)
raw<-(file="/home/chris/projects/openspending/Rechnungsabschluss2009.csv",header=T,quote="'")
raw<-(file="/home/chris/projects/openspending/Rechnungsabschluss2009.csv",header=T)
raw<-(file="/home/chris/projects/openspending/Rechnungsabschluss2009.csv",header=T,sep=";")
raw<-read.csv(file="/home/chris/projects/openspending/Rechnungsabschluss2009.csv",header=T,sep=";")
raw<-read.csv2(file="/home/chris/projects/openspending/Rechnungsabschluss2009.csv",header=T,sep=";")
categories<-read.delim(file="/home/chris/projects/openspending/OpenDataBudget/Legende Gemeindefinanzen.txt",header=T,sep=";")
raw<-read.delim(file="/home/chris/projects/openspending/Rechnungsabschluss2009.csv",sep=";",header=T)
rm(wbdata)
head(categories)
summary(categories)
raw[time]<-2009
raw["time""]<-2009
raw["time"]<-2009
head(raw)
write(raw,file="/home/chris/projects/openspending/Graz2009.csv",sep=";")
write.table(raw,file="/home/chris/projects/openspending/Graz2009.csv",sep=";")
head(categories)
?where
categories$UnterabschnittName where ABNr =1
ABNr01<-subset(categories$UnterabschnittName,subset=categories$ABNr=1)
ABNr01<-subset(categories$UnterabschnittName,subset=categories$ABNr IS 1)
ABNr01<-subset(categories$UnterabschnittName,subset=categories$ABNr==1)
ABNr01
head(categories)
ABNr01<-subset(categories,subset=categories$ABNr==1)
head(ABNr01)
summary(ABNr01)
head(raw)
raw$Finanzposition
raw$Finanzposition[0]
raw$Finanzposition[0,1]
?split
strsplit(raw$Finanzposition,split=".")
strsplit(raw$Finanzposition[0],split=".")
strsplit(raw$Finanzposition[0],split="\.")
strsplit(raw$Finanzposition[0],split="\\.")
strsplit("a.s.d.f.",split="\\.")
for row in raw:
for row in raw
data$
asdf
data$
asdf
raw$Gruppe
head(raw)
raw$Gruppe<-NA
head(raw)
for(row in raw){}
for(row in raw){
strsplit(raw$Finanzposition,split="\\.")}
for(row in raw){
print(raw$Finanzposition)
}
strsplit(raw$Finanzposition[0],split="\\.")
strsplit(raw$Finanzposition[0[1]],split="\\.")
head(categories)
categories$Postenklassen(categories$PKNR="8" AND categories$PUKNr="83" AND categories$post3Nr="830")
categories$Postenklassen(categories$PKNR=="8" AND categories$PUKNr=="83" AND categories$post3Nr=="830")
categories$Postenklassen(categories$PKNR=="8" && categories$PUKNr=="83" && categories$post3Nr=="830")
subset(categories$Gruppe,subset=categories$PKNR=="8" && categories$PUKNr=="83" && categories$post3Nr=="830")
as.list(raw$Finanzposition)
as.list(subset(categories$Gruppe,subset=categories$PKNR=="8" && categories$PUKNr=="83" && categories$post3Nr=="830"))
test<-subset(categories$Gruppe,subset=categories$PKNR=="8" && categories$PUKNr=="83" && categories$post3Nr=="830"))
test<-subset(categories$Gruppe,subset=categories$PKNR=="8" && categories$PUKNr=="83" && categories$post3Nr=="830")
test
fix(test)
typeof(names(categories))
typeof(categories[,1])
typeof(categories[1])
typeof(categories[1,])
typeof(categories[1;])
typeof(categories[1])
typeof(categories)
categories
head(categories)
class(categories[1,])
class(categories[1[1,]])
class(categories[1[,1]])
class(categories[1])
class(categories[,1])
lapply(class(categories[,1]))
lapply(class(categories[1]))
apply(class(categories[1]))
lapply(categories[1],class)
lapply(categories[,1],class)
apply(categories[1],class)
mapply(categories[1],class)
tapply(categories[,1],class)
lapply(categories[,1],class)
lapply(categories[1],class)
lapply(categories[0],class)
lapply(categories[0,],class)
tail(categories)
head(categories)
table(categories)
table(categories$post3Nr,categories$Postengruppe)
levels(categories$Postengruppe)
names(categories)
for(levels(categories$Postengruppe)){
for (levels(categories$Postengruppe)){
for levels(categories$Postengruppe)){
for (level in levels(categories$Postengruppe)){
categories$post3Nr(categories$Postengruppe==level)}
head(categories)
for (level in levels(raw$Finanzposition)){
strsplit(level,split="\\.")}
positions<-list
positions
positions<-list()
for (level in levels(raw$Finanzposition)){
append(positions,strsplit(level,split="\\."))}
positions
levels(raw$Finanzposition)
for (level in levels(raw$Finanzposition)){
print(level)}
for (level in levels(raw$Finanzposition)){
level}
print(strsplit(level,split="\\.") for level in levels(raw$Finanzposition[0])}
for (level in levels(raw$Finanzposition[0])){
print(strsplit(level,split="\\."))}
finsplit<-data.frame(row.names=c("Haushaltshinweis","FunktionelleGliederung","ÖkonomischeGliederung"))
finsplit
for (level in levels(raw$Finanzposition[0])){
append(positions,strsplit(level,split="\\."))}
positions
for (level in levels(raw$Finanzposition[0])){
print(strsplit(level,split="\\.")/100)}
print((strsplit(level,split="\\."))/100)}
for (level in levels(raw$Finanzposition[0])){
print(typeof(strsplit(level,split="\\.")))}
for (level in levels(raw$Finanzposition[0])){
print(typeof(strsplit(level,split="\\."))[1])}
print(length(strsplit(level,split="\\.")))}
for (level in levels(raw$Finanzposition[0])){
print(length(strsplit(level,split="\\.")))}
for (level in levels(raw$Finanzposition[0])){
print(strsplit(level,split="\\."))[1]}
print(strsplit(level,split="\\."))[1[1]]}
print(strsplit(level,split="\\."))[2]}
for (level in levels(raw$Finanzposition[0])){
print(strsplit(level,split="\\."))[2]}
for (level in levels(raw$Finanzposition[0])){
}
head(raw)
unique(raw$Bezeichnung)
`05.baseline.scenarios.spreadsheet` <- read.csv("~/UNI/13SS/\x06konomik der Umwelt/BA-thesis.git/output/05 baseline scenarios-spreadsheet.csv")
viewData(`05.baseline.scenarios.spreadsheet`)
`05.baseline.scenarios.spreadsheet` <- read.csv("~/UNI/13SS/\x06konomik der Umwelt/BA-thesis.git/output/05 baseline scenarios-spreadsheet.csv")
viewData(`05.baseline.scenarios.spreadsheet`)
`05.scenarios.spreadsheet` <- read.csv("~/UNI/13SS/\x06konomik der Umwelt/BA-thesis.git/output/05 baseline scenarios-spreadsheet.csv")
viewData(`05.scenarios.spreadsheet`)
`05.baseline.scenarios.table` <- read.csv("~/UNI/13SS/\x06konomik der Umwelt/BA-thesis.git/output/05 baseline scenarios-table.csv")
viewData(`05.baseline.scenarios.table`)
baselinescenarios <- read.csv("~/UNI/13SS/\x06konomik der Umwelt/BA-thesis.git/output/baselinescenarios.csv")
viewData(baselinescenarios)
raw <- read.csv("~/UNI/13SS/Ökonomik der Umwelt/BA-thesis.git/output/baselinescenarios.csv")
raw <- as.data.frame(raw)
head(raw)
summary(raw)
setwd("~/UNI/13SS/Ökonomik der Umwelt/BA-thesis.git/output/")
raw <- read.csv("~/UNI/13SS/Ökonomik der Umwelt/BA-thesis.git/output/baselinescenarios.csv")
raw$step <- raw$step - 104  # remove first two years of each run
raw <- subset.data.frame(raw,subset=raw$step >= 0)
viewData(raw)
raw <- read.csv("~/UNI/13SS/Ökonomik der Umwelt/BA-thesis.git/output/baselinescenarios.csv")
raw$step <- raw$step - 104  # remove first two years of each run
viewData(raw)
setwd("~/UNI/13SS/Ökonomik der Umwelt/BA-thesis.git/output/")
raw <- read.csv("~/UNI/13SS/Ökonomik der Umwelt/BA-thesis.git/output/baselinescenarios.csv")
names(raw)
name(raw$run.number)<-("run number")
names(raw)[names(raw)=="run.number"] <- "run_number"
names(raw)[names(raw)=="minimum.flow"] <- "minimum_flow"
names(raw)[names(raw)=="tep"] <- "step"
names(raw)[names(raw)=="mean.utility.of.households.with.demand.pc.1"] <- "mean_household_utility"
names(raw)[names(raw)=="mean.utility.loss.of.households.with.demand.pc.1"] <- "mean_household_utility_loss"
names(raw)[names(raw)=="mean.utilityof.irrigations.with.demand.pc.1"] <- "mean_irrigation_utility"
names(raw)[names(raw)=="mean.utility.loss.of.irrigations.with.demand.pc.1"] <- "mean_irrigation_utility_loss"
names(raw)[names(raw)=="sum.utility.loss.of.irrigations.with.demand.pc.1"] <- "sum_irrigation_utility_loss"
names(raw)[names(raw)=="sum.utility.of.irrigations.with.demand.pc.1"] <- "sum_irrigation_utility"
names(raw)[names(raw)=="sum.utility.of.households.with.demand.pc.1"] <- "sum_household_utility"
names(raw)[names(raw)=="sum.utility.loss.of.households.with.demand.pc.1"] <- "sum_household_utility_loss"
names(raw)[names(raw)=="round.ebro.discharge"] <- "ebro_discharge"
names(raw)[names(raw)=="mean.hh.size.of.households"] <- "mean_household_size"
names(raw)[names(raw)=="round.storage"] <- "storage"
names(raw)[names(raw)=="count.irrigations.with.crop.type.1"] <- "number_irrigation_crop_1"
names(raw)[names(raw)=="count.irrigations.with.crop.type.0"] <- "number_irrigation_crop_0"
names(raw)[names(raw)=="count.irrigations.withcrop.type.2"] <- "number_irrigation_crop_2"
names(raw)[names(raw)=="count.irrigations.with.crop.type.3"] <- "number_irrigation_crop_3"
names(raw)
names(raw)[names(raw)=="demand.pc"] <- "demand_pc"
names(raw)
names(raw)[names(raw)=="mean.utilityof.irrigations.with.demand.1"] <- "mean_irrigation_utility"
names(raw)[names(raw)=="mean.utility.loss.of.irrigations.with.demand.1"] <- "mean_irrigation_utility_loss"
names(raw)[names(raw)=="sum.utility.loss.of.irrigations.with.demand.1"] <- "sum_irrigation_utility_loss"
names(raw)
names(raw)[names(raw)=="sum.utility.loss.of.irrigations"] <- "sum_irrigation_utility_loss"
names(raw)[names(raw)=="sum.utility.of.irrigations.with.demand.1"] <- "sum_irrigation_utility"
names(raw)
names(raw)[names(raw)=="sum.utility.loss.of.hoseholds"] <- "sum_household_utility_loss"
names(raw)
head(raw)
raw$step <- raw$step - 104  # remove first two years of each run
raw <- subset.data.frame(raw,subset=raw$step >= 0)
head(raw)
summary(raw)
raw$hh.tech.improve<-NULL
raw$agro.tech.improve<-NULL
summary(raw)
raw$agro.tech.improve<-NULL
save.image("~/UNI/13SS/Ökonomik der Umwelt/BA-thesis.git/output/analysis.RData")
plot(raw$step, raw$storage)
plot(raw$step, raw$mean_household_utility)
plot(raw)
smoothscatter(raw$step, raw$mean_irrigation_utility)
plot(raw$step, raw$mean_irrigation_utility)
plot(raw$step, raw$mean_irrigation_utility_loss)
hh_utilites <- as.data.frame(raw$step,raw$mean_household_utility,raw$mean_household_size,raw$demand_pc)
hh_utilites <- as.data.frame[raw$step,raw$mean_household_utility,raw$mean_household_size,raw$demand_pc]
hh_utilites <- subset.data.frame(select=c(raw$step, raw$mean_household_utility,raw$mean_household_size,raw$demand_pc))
hh_utilites <- subset.data.frame(raw,select=c(raw$step, raw$mean_household_utility,raw$mean_household_size,raw$demand_pc))
hh_utilites <- subset.data.frame(raw,select=raw$step, raw$mean_household_utility,raw$mean_household_size,raw$demand_pc)
hh_utilites <- subset.data.frame(raw,select=raw$step)
plot(raw$mean_household_size,raw$mean_household_utility)
plot(raw$mean_household_size,raw$mean_household_utility_loss)
scatter.smooth(raw$mean_household_size,raw$mean_household_utility_loss)
plot(raw$step,raw$demand_pc)
